# Comparison of save_patterns method in src/pattern_extraction.py and forex_pattern_framework/src/pattern_extraction.py

## src/pattern_extraction.py save_patterns method:

def save_patterns(self, timeframe, windows, timestamps, cluster_labels, representatives):
    """
    Save extracted patterns to disk.
    """
    patterns_dir = os.path.join(self.output_dir, 'data')
    os.makedirs(patterns_dir, exist_ok=True)
    
    # Convert timestamps to strings for JSON serialization
    timestamps_str = [ts.strftime('%Y-%m-%d %H:%M:%S') for ts in timestamps]
    
    # Create serializable representatives dictionary
    serializable_representatives = {}
    for label, rep_data in representatives.items():
        serializable_representatives[label] = {
            'window': rep_data['window'].tolist() if isinstance(rep_data['window'], np.ndarray) else rep_data['window'],
            'timestamp': rep_data['timestamp'].strftime('%Y-%m-%d %H:%M:%S') if hasattr(rep_data['timestamp'], 'strftime') else rep_data['timestamp'],
            'index': int(rep_data['index']),
            'count': int(rep_data['count'])
        }
    
    # Create patterns dictionary
    patterns_data = {
        'timeframe': timeframe,
        'extraction_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'n_patterns': len(windows),
        'window_size': len(windows[0]) if windows else 0,
        'cluster_labels': cluster_labels.tolist(),
        'representatives': serializable_representatives,
        'unique_clusters': int(len(np.unique(cluster_labels)))
    }
    
    # Save patterns data
    patterns_file = os.path.join(patterns_dir, f"{timeframe}_patterns.json")
    with open(patterns_file, 'w') as f:
        json.dump(patterns_data, f, indent=2)
        
    # Save full pattern data (windows and timestamps) as pickle
    full_data = {
        'windows': windows,
        'timestamps': timestamps,
        'cluster_labels': cluster_labels
    }
    
    pickle_file = os.path.join(patterns_dir, f"{timeframe}_full_patterns.pkl")
    with open(pickle_file, 'wb') as f:
        pickle.dump(full_data, f)
        
    logger.info(f"Saved patterns data to {patterns_file} and {pickle_file}")
    
    return patterns_file


## forex_pattern_framework/src/pattern_extraction.py save_patterns method:

def save_patterns(self, timeframe, windows, timestamps, cluster_labels, representatives):
    """
    Save extracted patterns to disk.
    """
    patterns_dir = os.path.join(self.output_dir, 'data')
    os.makedirs(patterns_dir, exist_ok=True)
    
    # Convert timestamps to strings for JSON serialization
    timestamps_str = [ts.strftime('%Y-%m-%d %H:%M:%S') for ts in timestamps]
    
    # Convert representative timestamps to strings
    for label in representatives:
        representatives[label]['timestamp'] = representatives[label]['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
        representatives[label]['window'] = representatives[label]['window'].tolist()
    
    # Create patterns dictionary
    patterns_data = {
        'timeframe': timeframe,
        'extraction_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'n_patterns': len(windows),
        'window_size': len(windows[0]) if windows else 0,
        'cluster_labels': cluster_labels.tolist(),
        'representatives': representatives,
        'unique_clusters': len(np.unique(cluster_labels))
    }
    
    # Save patterns data
    patterns_file = os.path.join(patterns_dir, f"{timeframe}_patterns.json")
    with open(patterns_file, 'w') as f:
        json.dump(patterns_data, f, indent=2)
        
    # Save full pattern data (windows and timestamps) as pickle
    full_data = {
        'windows': windows,
        'timestamps': timestamps,
        'cluster_labels': cluster_labels
    }
    
    pickle_file = os.path.join(patterns_dir, f"{timeframe}_full_patterns.pkl")
    with open(pickle_file, 'wb') as f:
        pickle.dump(full_data, f)
        
    logger.info(f"Saved patterns data to {patterns_file} and {pickle_file}")
    
    return patterns_file
